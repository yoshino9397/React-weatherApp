{"version":3,"sources":["components/SearchBox.js","components/Geolocation.js","components/WeatherDisplay.js","components/Wrapper.js","utils/fetchHelpers.js","assets/blue.jpg","assets/green.jpg","assets/orange.jpg","components/Weather.js","App.js","index.js"],"names":["StyledSearchBox","styled","div","SearchBox","handleInput","handleSubmit","onSubmit","e","type","onChange","autoComplete","placeholder","StyledGeolocation","Geolocation","location","currentDate","city","state","country","StyledWeatherDisplay","WeatherDisplay","weather","currentTemp","weatherMain","tempMax","tempMin","Math","round","StyledWrapper","Wrapper","states","getGeocode","a","URL","process","fetch","then","data","json","result","features","geocodeList","coordinates","center","placeName","matching_text","text","context","getWeather","geocodeResult","lon","lat","split","weatherResult","current","temp","todayWeather","daily","main","max","min","StyledWeather","props","bgImage","blue","green","orange","Weather","useState","inputLocation","setInputLocation","setCurrentDate","setLocation","setWeather","fetchData","newLocation","now","Date","dateBuilder","response","useEffect","newWeather","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","hour","getHours","setBackground","preventDefault","target","value","App","className","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.16c40b32.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nconst StyledSearchBox = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 150px 15px 15px;\n\n  & input {\n    width: 100%;\n    max-width: 280px;\n    padding: 10px 15px;\n    border: none;\n    outline: none;\n    background-color: rgba(255, 255, 255, 0.3);\n    border-radius: 16px 0px 16px 0px;\n    border-bottom: 3px solid rgba(0, 0, 0, 0.3);\n\n    color: #313131;\n    font-size: 20px;\n    transition: all 0.3s ease-out;\n    &:focus {\n      background-color: rgba(255, 255, 255, 0.6);\n      border-color: rgba(0, 0, 0, 0.6);\n    }\n  }\n`;\n\nconst SearchBox = ({ handleInput, handleSubmit }) => (\n  <StyledSearchBox>\n    <form\n      onSubmit={(e) => {\n        handleSubmit(e);\n      }}\n    >\n      <input\n        type=\"text\"\n        onChange={(e) => {\n          handleInput(e);\n        }}\n        autoComplete=\"off\"\n        placeholder=\"Search for a city...\"\n      />\n    </form>\n  </StyledSearchBox>\n);\n\nexport default SearchBox;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst StyledGeolocation = styled.div`\n  color: #fff;\n\n  h1 {\n    color: #fff;\n    font-size: 2.5rem;\n    font-weight: 500;\n    margin-bottom: 5px;\n  }\n\n  h3 {\n    font-size: 1.3rem;\n  }\n`;\n\nconst Geolocation = ({ location, currentDate }) => (\n  <StyledGeolocation>\n    <h1> {location.city} </h1>\n    <h1>\n      {location.state}, {location.country}{\" \"}\n    </h1>\n    <h3> {currentDate} </h3>\n  </StyledGeolocation>\n);\n\nexport default Geolocation;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst StyledWeatherDisplay = styled.div`\n  color: #fff;\n\n  h1 {\n    font-size: 6.5rem;\n    font-weight: 900;\n    margin: 30px 0px;\n    text-shadow: 4px 10px rgba(0, 0, 0, 0.6);\n    & span {\n      font-size: 5rem;\n      font-weight: 500;\n    }\n  }\n\n  h2 {\n    font-size: 2rem;\n    font-weight: 700;\n    font-style: italic;\n    margin-bottom: 15px;\n    text-shadow: 0px 4px rgba(0, 0, 0, 0.6);\n  }\n\n  h3 {\n    font-size: 1.5rem;\n    font-weight: 500;\n    text-shadow: 0px 4px rgba(0, 0, 0, 0.6);\n    margin-bottom: 10px;\n  }\n`;\n\nconst WeatherDisplay = ({\n  weather: { currentTemp, weatherMain, tempMax, tempMin },\n}) => (\n  <StyledWeatherDisplay>\n    <h1>\n      {Math.round(currentTemp)}\n      <span>&#186;C</span>\n    </h1>\n    <h2>{weatherMain}</h2>\n    <h3>\n      {Math.round(tempMin)}&#186;C / {Math.round(tempMax)}&#186;C\n    </h3>\n  </StyledWeatherDisplay>\n);\n\nexport default WeatherDisplay;\n","import React from \"react\";\n\nimport SearchBox from \"./SearchBox\";\nimport Geolocation from \"./Geolocation\";\nimport WeatherDisplay from \"./WeatherDisplay\";\n\nimport styled from 'styled-components';\n\nconst StyledWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  text-align: center;\n  width: 100vw;\n  min-height: 100vh;\n  background-image: linear-gradient(to bottom, rgba( 0, 0, 0, 0.2), rgba(0, 0, 0, 0.6));\n`\nconst Wrapper = ({ handleInput, handleSubmit, states }) => (\n  <StyledWrapper>\n    <SearchBox handleInput={handleInput} handleSubmit={handleSubmit} />\n    <Geolocation location={states.location} currentDate={states.currentDate} />\n    <WeatherDisplay weather={states.weather} />\n  </StyledWrapper>\n);\n\nexport default Wrapper;\n","const MAPBOX_BASE = \"https://api.mapbox.com/geocoding/v5/mapbox.places/\";\nconst WEATHER_BASE = \"https://api.openweathermap.org/data/2.5/onecall\";\n\nconst getGeocode = async (location) => {\n  const URL = `${MAPBOX_BASE}${location}.json?types=place&access_token=${process.env.REACT_APP_MAPBOX_ACCESS_TOKEN}`;\n\n  const geocodeList = await fetch(URL)\n    .then((data) => data.json())\n    .then((result) => result.features);\n\n  // The coordinates of the featureâ€™s center in the form [longitude,latitude]\n  const coordinates = geocodeList[0].center;\n  // The ternary operator prevents return of placeName in non-Latin letters (places with Japanese letters for example)\n  const placeName = geocodeList[0].matching_text\n    ? geocodeList[0].matching_text\n    : geocodeList[0].text;\n\n  const state = geocodeList[0].context[0].text;\n  const country = geocodeList[0].context[1].text;\n  return { coordinates, placeName, state, country };\n};\n\nexport const getWeather = async (location) => {\n  const geocodeResult = await getGeocode(location);\n  const [lon, lat] = geocodeResult.coordinates;\n  // .split(/\\b\\s[Ss]hi\\b/) cut off japanese city sufix ('Iwata Shi' == after split() ==> 'Iwata')\n  const placeName = {\n    city: geocodeResult.placeName.split(/\\b\\s[Ss]hi\\b/)[0],\n    state: geocodeResult.state,\n    country: geocodeResult.country,\n  };\n\n  const URL = `${WEATHER_BASE}?lat=${lat}&lon=${lon}&exclude=minutely,hourly,alerts&units=metric&appid=${process.env.REACT_APP_OPEN_WEATHER_KEY}`;\n\n  const weatherResult = await fetch(URL)\n    .then((data) => data.json())\n    .then((result) => result);\n\n  const currentTemp = weatherResult.current.temp;\n  const todayWeather = weatherResult.daily[0];\n  const weatherMain = todayWeather.weather[0].main;\n  const tempMax = todayWeather.temp.max;\n  const tempMin = todayWeather.temp.min;\n\n  return [{ currentTemp, weatherMain, tempMax, tempMin }, placeName];\n};\n","export default __webpack_public_path__ + \"static/media/blue.610f9b44.jpg\";","export default __webpack_public_path__ + \"static/media/green.a361963b.jpg\";","export default __webpack_public_path__ + \"static/media/orange.839534d3.jpg\";","import React, { useState, useEffect } from \"react\";\nimport Wrapper from \"./Wrapper\";\nimport { getWeather } from \"../utils/fetchHelpers\";\nimport styled from 'styled-components';\nimport blue from '../assets/blue.jpg';\nimport green from '../assets/green.jpg';\nimport orange from '../assets/orange.jpg';\n\nconst StyledWeather = styled.div`\n  background-image: url(\n    ${props => {\n    if (props.bgImage === 'blue') {\n      return blue;\n    }\n    if (props.bgImage === 'green') {\n      return green;\n    }\n    if (props.bgImage === 'orange') {\n      return orange;\n    }\n  }}\n  );\n  background-size: cover;\n  background-position: top center;\n`\n\nconst Weather = () => {\n  const [inputLocation, setInputLocation] = useState(\"Canada\");\n  const [currentDate, setCurrentDate] = useState(\"\");\n  const [location, setLocation] = useState({\n    city: \"\",\n    state: \"\",\n    country: \"\",\n  });\n  const [weather, setWeather] = useState({\n    currentTemp: 0,\n    weatherMain: \"\",\n    tempMax: 0,\n    tempMin: 0,\n  });\n\n  useEffect(() => {\n    fetchData(\"Vancouver\").then(([newWeather, placeName]) => {\n      setWeather(newWeather);\n      setLocation(placeName);\n    });\n  }, []);\n\n  async function fetchData(newLocation) {\n    const now = new Date();\n    setCurrentDate(dateBuilder(now));\n    const response = await getWeather(newLocation);\n    return response;\n  }\n\n  const setBackground = () => {\n    const now = new Date();\n    const hour = now.getHours();\n    if (hour <= 7 || hour > 18) {\n      return \"blue\";\n    }\n    if (hour > 7 && hour <= 15) {\n      return \"green\";\n    }\n    return \"orange\";\n  };\n\n  const dateBuilder = (d) => {\n    const months = [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\",\n    ];\n    const days = [\n      \"Sunday\",\n      \"Monday\",\n      \"Tuesday\",\n      \"Wednesday\",\n      \"Thursday\",\n      \"Friday\",\n      \"Saturday\",\n    ];\n\n    const day = days[d.getDay()];\n    const date = d.getDate();\n    const month = months[d.getMonth()];\n    const year = d.getFullYear();\n\n    return `${day} ${date} ${month} ${year}`;\n  };\n\n  const handleInputLocation = (e) => {\n    e.preventDefault();\n    setInputLocation(e.target.value);\n  };\n\n  const getForecast = (e) => {\n    e.preventDefault();\n    fetchData(inputLocation).then(([newWeather, placeName]) => {\n      setWeather(newWeather);\n      setLocation(placeName);\n    });\n  };\n\n  return (\n    <StyledWeather bgImage={setBackground()}>\n      <Wrapper\n        states={{ location, currentDate, weather }}\n        handleInput={handleInputLocation}\n        handleSubmit={getForecast}\n      />\n    </StyledWeather>\n  );\n};\n\nexport default Weather;\n","import React from 'react';\nimport Weather from './components/Weather';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Weather />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}